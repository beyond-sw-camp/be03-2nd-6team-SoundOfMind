{"ast":null,"code":"import axios from 'axios';\n// import CKEditor from '@ckeditor/ckeditor5-vue';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nexport default {\n  props: ['isAdmin', 'pageTitle', 'id'],\n  data() {\n    return {\n      postList: [],\n      commentList: [],\n      // pageSize: 10, //페이지 당 목록 갯수\n      // currentPage: 0, //화면 페이지\n      searchType: 'optional',\n      // 기본값 설정\n      searchValue: '',\n      title: '',\n      contents: '',\n      comment: '',\n      isLastPage: false,\n      isLoading: false,\n      editor: ClassicEditor\n    };\n  },\n  created() {\n    this.loadPosts(this.id);\n    this.loadComments();\n    if (localStorage.getItem(\"token\")) {\n      this.isLogin = true;\n      this.userRole = localStorage.getItem(\"role\");\n    }\n  },\n  methods: {\n    async loadPosts(id) {\n      console.log(id);\n      this.isLoading = true;\n      try {\n        // params 키워드 사용해야 파라미터 방식으로 axios요청 가능\n        const params = {\n          page: this.currentPage,\n          size: this.pageSize\n        };\n        const token = localStorage.getItem('token');\n        const headers = token ? {\n          Authorization: `Bearer ${token}`\n        } : {};\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/board/post/${id}/detail`, {\n          headers,\n          params\n        });\n        this.postList = response.data.data;\n        this.title = this.postList.title, this.contents = this.postList.contents;\n        console.log(this.postList);\n      } catch (error) {\n        console.error(\"데이터 불러오기 오류:\", error); // 에러 콘솔에 표시\n      }\n    },\n    async commentCreate() {\n      this.isLoading = true;\n      try {\n        const formData = new FormData();\n        formData.append('comment', this.comment);\n        const token = localStorage.getItem('token');\n        const headers = token ? {\n          Authorization: `Bearer ${token}`\n        } : {};\n        console.log(formData);\n        await axios.post(`${process.env.VUE_APP_API_BASE_URL}/board/${this.id}/comment`, formData, {\n          headers\n        });\n\n        // this.$router.push({ name: 'PostListDetail' });\n        // 댓글 등록 후에 해당 게시글을 다시 불러옴\n        this.loadPosts(this.id);\n        alert(\"댓글이 등록되었습니다.\");\n        window.location.reload();\n        // this.$router.push({ name: 'PostListDetail' });\n      } catch (error) {\n        // 오류 발생 시 처리\n        console.error(error);\n        alert(\"입력값 확인 필요\");\n      }\n      this.isLoading = false;\n    },\n    async loadComments(id) {\n      console.log(id);\n      this.isLoading = true;\n      try {\n        // params 키워드 사용해야 파라미터 방식으로 axios요청 가능\n        const params = {\n          page: this.currentPage,\n          size: this.pageSize\n        };\n        const token = localStorage.getItem('token');\n        const headers = token ? {\n          Authorization: `Bearer ${token}`\n        } : {};\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/board/${this.id}/comment/list`, {\n          headers,\n          params\n        });\n        this.commentList = response.data.data;\n        // this.title = this.postList;\n        // this.contents = this.postList.contents;\n        console.log(this.commentList);\n      } catch (error) {\n        console.error(\"데이터 불러오기 오류:\", error); // 에러 콘솔에 표시\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","ClassicEditor","props","data","postList","commentList","searchType","searchValue","title","contents","comment","isLastPage","isLoading","editor","created","loadPosts","id","loadComments","localStorage","getItem","isLogin","userRole","methods","console","log","params","page","currentPage","size","pageSize","token","headers","Authorization","response","get","process","env","VUE_APP_API_BASE_URL","error","commentCreate","formData","FormData","append","post","alert","window","location","reload"],"sources":["/Users/song/Desktop/springproject/som-front/src/views/PostDetail.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n      <div class=\"page-header text-center\" style=\"margin-top: 20px\">\n        <h1>게시글</h1>\n        </div>\n            <!-- <form @submit.prevent=\"postCreate\"> -->\n                <!-- <a href=\"\"><button class=\"btn btn-primary\" type=\"submit\" value=\"작성\">게시글 수정</button></a> -->\n                <div class=\"form-group\">\n                    <label>게시글 제목:</label>\n                    <div v-html=\"title\"></div>\n                </div>\n                <div class=\"form-group\">\n                    <label>게시글 내용:</label>\n                    <div v-html=\"contents\"></div>\n                    <!-- <ckeditor :editor=\"editor\" v-model=\"contents\" :config=\"editorConfig\"></ckeditor> -->\n                </div>\n            <!-- </form> -->\n        </div>\n\n    <div class=\"container\">\n        <form @submit.prevent=\"commentCreate\">\n            <div class=\"form-group\">\n                <label>댓글 작성</label>\n                <input type=\"text\" v-model=\"contents\" class=\"form-control\">\n                <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"!comment.trim()\">등록</button>\n            </div>\n        </form>\n    </div>\n\n    <!-- <div v-for=\"comment in commentList\" :key=\"comment.id\" class=\"comment-box\">\n        <p>{{ comment.member_email }}</p>\n        <p>{{ comment.comment }}</p>\n    </div> -->\n\n    <div v-for=\"comment in commentList\" :key=\"comment.id\" class=\"comment-box\">\n        <div class=\"email-box\">\n          <p v-if=\"userRole !== 'ADMIN'\">익명</p>\n          <p v-if=\"userRole === 'ADMIN'\">{{ comment.nickname }}</p>\n        </div>\n        <div class=\"comment-text-box\">\n          <p>{{ comment.comment }}</p>\n        </div>\n      </div>\n      \n\n\n</template>\n\n\n<script>\nimport axios from 'axios';\n// import CKEditor from '@ckeditor/ckeditor5-vue';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nexport default {\n    props: ['isAdmin', 'pageTitle', 'id'],\n    data() {\n        return {\n            postList: [],\n            commentList:[],\n            // pageSize: 10, //페이지 당 목록 갯수\n            // currentPage: 0, //화면 페이지\n            searchType: 'optional', // 기본값 설정\n            searchValue: '',\n            title: '',\n            contents: '',\n            comment : '',\n            isLastPage: false,\n            isLoading: false,\n            editor: ClassicEditor,\n        };\n    },\n    created(){\n        this.loadPosts(this.id);\n        this.loadComments();\n        if (localStorage.getItem(\"token\")) {\n            this.isLogin = true;\n            this.userRole = localStorage.getItem(\"role\");\n        }\n    },\n\n    methods: {\n        async loadPosts(id){\n            console.log(id)\n            this.isLoading = true;\n            try{\n            // params 키워드 사용해야 파라미터 방식으로 axios요청 가능\n            const params = {\n                page: this.currentPage,\n                size: this.pageSize,\n            }\n            const token = localStorage.getItem('token');\n            const headers = token ? { Authorization: `Bearer ${token}` } : {};\n            const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/board/post/${id}/detail`, {headers, params});\n            this.postList = response.data.data;\n            this.title = this.postList.title,\n            this.contents = this.postList.contents;\n            console.log(this.postList)\n            }catch(error){\n                console.error(\"데이터 불러오기 오류:\", error); // 에러 콘솔에 표시\n            }\n        },\n        async commentCreate(){\n            this.isLoading = true;\n            try {\n                const formData = new FormData();\n                formData.append('comment', this.comment);\n\n                const token = localStorage.getItem('token');\n                const headers = token ? { Authorization: `Bearer ${token}` } : {};\n                console.log(formData)\n                await axios.post(`${process.env.VUE_APP_API_BASE_URL}/board/${this.id}/comment`, formData, { headers });\n\n                // this.$router.push({ name: 'PostListDetail' });\n                // 댓글 등록 후에 해당 게시글을 다시 불러옴\n                this.loadPosts(this.id);\n                alert(\"댓글이 등록되었습니다.\");\n                window.location.reload();\n                // this.$router.push({ name: 'PostListDetail' });\n            } catch (error) {\n                // 오류 발생 시 처리\n                console.error(error);\n                alert(\"입력값 확인 필요\");\n            }\n            this.isLoading = false;\n        },\n        async loadComments(id){\n            console.log(id)\n            this.isLoading = true;\n            try{\n            // params 키워드 사용해야 파라미터 방식으로 axios요청 가능\n            const params = {\n                page: this.currentPage,\n                size: this.pageSize,\n            }\n            const token = localStorage.getItem('token');\n            const headers = token ? { Authorization: `Bearer ${token}` } : {};\n            const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/board/${this.id}/comment/list`, {headers, params});\n            this.commentList = response.data.data;\n            // this.title = this.postList;\n            // this.contents = this.postList.contents;\n            console.log(this.commentList)\n            }catch(error){\n                console.error(\"데이터 불러오기 오류:\", error); // 에러 콘솔에 표시\n            }\n        },\n    }\n}\n</script>\n\n\n<style scoped>\n.ck-editor__editable { height: 400px; }\n.ck-content { font-size: 12px; }\n.comment-box {\n  margin-bottom: 10px;\n  padding: 10px;\n  border: 1px solid #ccc;\n}\n\n.email-box, .comment-text-box {\n  margin-bottom: 5px;\n}\n\n.email-box p, .comment-text-box p {\n  margin: 0;\n  padding: 5px;\n}\n</style>\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}