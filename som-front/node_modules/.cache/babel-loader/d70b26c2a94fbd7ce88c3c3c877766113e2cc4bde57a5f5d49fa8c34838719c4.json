{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"row justify-content-center mt-5\"\n};\nconst _hoisted_3 = {\n  class: \"col-md-6\"\n};\nconst _hoisted_4 = {\n  class: \"card\"\n};\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"card-header text-center\",\n  style: {\n    \"color\": \"black\"\n  }\n}, \"비밀번호 재설정\", -1 /* HOISTED */);\nconst _hoisted_6 = {\n  class: \"card-body\"\n};\nconst _hoisted_7 = {\n  class: \"mb-3\"\n};\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"email\",\n  class: \"form-label\"\n}, \"이메일 주소\", -1 /* HOISTED */);\nconst _hoisted_9 = {\n  class: \"input-group\"\n};\nconst _hoisted_10 = {\n  class: \"mb-3\"\n};\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"verificationCode\",\n  class: \"form-label\"\n}, \"인증번호\", -1 /* HOISTED */);\nconst _hoisted_12 = {\n  class: \"mb-3\"\n};\nconst _hoisted_13 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"password\",\n  class: \"form-label\"\n}, \"새 비밀번호\", -1 /* HOISTED */);\nconst _hoisted_14 = /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\",\n  class: \"btn btn-primary w-100\"\n}, \"확인\", -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_hoisted_5, _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"form\", {\n    onSubmit: _cache[4] || (_cache[4] = _withModifiers((...args) => $options.submitForm && $options.submitForm(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", _hoisted_7, [_hoisted_8, _createElementVNode(\"div\", _hoisted_9, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"email\",\n    class: \"form-control\",\n    id: \"email\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.email = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.email]]), _createElementVNode(\"button\", {\n    class: \"btn btn-primary\",\n    type: \"button\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.sendVerificationCode && $options.sendVerificationCode(...args))\n  }, \"전송\")])]), _createElementVNode(\"div\", _hoisted_10, [_hoisted_11, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    class: \"form-control\",\n    id: \"verificationCode\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.verificationCode = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.verificationCode]])]), _createElementVNode(\"div\", _hoisted_12, [_hoisted_13, _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    class: \"form-control\",\n    id: \"password\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.password = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.password]])]), _hoisted_14], 32 /* NEED_HYDRATION */)])])])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","style","for","type","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","onSubmit","_cache","_withModifiers","args","$options","submitForm","_hoisted_7","_hoisted_8","_hoisted_9","id","$event","$data","email","onClick","sendVerificationCode","_hoisted_10","_hoisted_11","verificationCode","required","_hoisted_12","_hoisted_13","password","_hoisted_14"],"sources":["/Users/song/Desktop/springproject/som-front/src/views/PasswordChange.vue"],"sourcesContent":["<template>\n    <div class=\"container\">\n      <div class=\"row justify-content-center mt-5\">\n        <div class=\"col-md-6\">\n          <div class=\"card\">\n            <div class=\"card-header text-center\" style=\"color: black;\">비밀번호 재설정</div>\n            <div class=\"card-body\">\n              <form @submit.prevent=\"submitForm\">\n                <div class=\"mb-3\">\n                  <label for=\"email\" class=\"form-label\">이메일 주소</label>\n                  <div class=\"input-group\">\n                    <input type=\"email\" class=\"form-control\" id=\"email\" v-model=\"email\">\n                    <button class=\"btn btn-primary\" type=\"button\" @click=\"sendVerificationCode\">전송</button>\n                  </div>\n                </div>\n                <div class=\"mb-3\">\n                  <label for=\"verificationCode\" class=\"form-label\">인증번호</label>\n                  <input type=\"text\" class=\"form-control\" id=\"verificationCode\" v-model=\"verificationCode\" required>\n                </div>\n                <div class=\"mb-3\">\n                  <label for=\"password\" class=\"form-label\">새 비밀번호</label>\n                  <input type=\"password\" class=\"form-control\" id=\"password\" v-model=\"password\" required>\n                </div>\n                <button type=\"submit\" class=\"btn btn-primary w-100\">확인</button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n</template>\n<script>\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      email: '',\n      password: '',\n      verificationCode: ''\n    };\n  },\n  methods: {\n    async submitForm() {\n        try {\n        const requestData = {\n          email: this.email,\n          verificationCode: this.verificationCode,\n          password: this.password\n        };\n\n        const token = localStorage.getItem('token');\n        const headers = token ? { Authorization: `Bearer ${token}` } : {};\n\n        await axios.get(`${process.env.VUE_APP_API_BASE_URL}/admin/account/password/verify-code/{email}/{code}`, requestData, { headers });\n\n        // 성공적으로 작성된 경우 리다이렉트 또는 다른 처리 수행\n        // this.$router.push({ name: 'LoginComponent' });\n        alert(\"정상\");\n      } catch (error) {\n        // 오류 발생 시 처리\n        console.error(error);\n        alert(\"입력값 확인 필요\");\n      }\n      // 여기에 비밀번호 재설정 양식 제출에 대한 로직을 추가하세요.\n      console.log('비밀번호 재설정 양식이 제출되었습니다.');\n      console.log('Email:', this.email);\n      console.log('인증번호:', this.verificationCode);\n      console.log('새 비밀번호:', this.password);\n    },\n    async sendVerificationCode() {\n      try {\n        // const requestData = {\n        //   email: this.email,\n        // };\n\n        const token = localStorage.getItem('token');\n        const headers = token ? { Authorization: `Bearer ${token}` } : {};\n\n        await axios.get(`${process.env.VUE_APP_API_BASE_URL}/admin/account/findPassword/${this.email}`, {headers});\n\n        // 성공적으로 작성된 경우 리다이렉트 또는 다른 처리 수행\n        // this.$router.push({ name: 'LoginComponent' });\n        alert(\"이메일이 전송되었습니다.\")\n      } catch (error) {\n        // 오류 발생 시 처리\n        console.error(error);\n        alert(\"입력값 확인 필요\");\n      }\n      // 이 부분에 전송 완료 알림을 표시하는 로직을 추가하세요.\n    }\n  }\n};\n</script>\n<style>\n.container {\n  height: 100vh;\n}\n.card {\n  margin-top: 50px;\n  border-radius: 10px;\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);\n}\n.card-header {\n  background-color: #007BFF;\n  color: rgb(0, 0, 0);\n  border-radius: 10px 10px 0 0;\n}\n.btn-primary {\n  background-color: #007BFF;\n  border-color: #007BFF;\n  color: black; /* 폰트 색상을 검은색으로 변경 */\n}\n.btn-primary:hover {\n  background-color: #0056B3;\n  border-color: #0056B3;\n}\n</style>"],"mappings":";;EACSA,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAiC;;EACrCA,KAAK,EAAC;AAAU;;EACdA,KAAK,EAAC;AAAM;gCACfC,mBAAA,CAAyE;EAApED,KAAK,EAAC,yBAAyB;EAACE,KAAqB,EAArB;IAAA;EAAA;GAAsB,UAAQ;;EAC9DF,KAAK,EAAC;AAAW;;EAEbA,KAAK,EAAC;AAAM;gCACfC,mBAAA,CAAoD;EAA7CE,GAAG,EAAC,OAAO;EAACH,KAAK,EAAC;GAAa,QAAM;;EACvCA,KAAK,EAAC;AAAa;;EAKrBA,KAAK,EAAC;AAAM;iCACfC,mBAAA,CAA6D;EAAtDE,GAAG,EAAC,kBAAkB;EAACH,KAAK,EAAC;GAAa,MAAI;;EAGlDA,KAAK,EAAC;AAAM;iCACfC,mBAAA,CAAuD;EAAhDE,GAAG,EAAC,UAAU;EAACH,KAAK,EAAC;GAAa,QAAM;iCAGjDC,mBAAA,CAA+D;EAAvDG,IAAI,EAAC,QAAQ;EAACJ,KAAK,EAAC;GAAwB,IAAE;;uBAtBlEK,mBAAA,CA4BM,OA5BNC,UA4BM,GA3BJL,mBAAA,CA0BM,OA1BNM,UA0BM,GAzBJN,mBAAA,CAwBM,OAxBNO,UAwBM,GAvBJP,mBAAA,CAsBM,OAtBNQ,UAsBM,GArBJC,UAAyE,EACzET,mBAAA,CAmBM,OAnBNU,UAmBM,GAlBJV,mBAAA,CAiBO;IAjBAW,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAP3BC,cAAA,KAAAC,IAAA,KAOqCC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;MAC/Bd,mBAAA,CAMM,OANNiB,UAMM,GALJC,UAAoD,EACpDlB,mBAAA,CAGM,OAHNmB,UAGM,G,gBAFJnB,mBAAA,CAAoE;IAA7DG,IAAI,EAAC,OAAO;IAACJ,KAAK,EAAC,cAAc;IAACqB,EAAE,EAAC,OAAO;IAXvE,uBAAAR,MAAA,QAAAA,MAAA,MAAAS,MAAA,IAWiFC,KAAA,CAAAC,KAAK,GAAAF,MAAA;iDAALC,KAAA,CAAAC,KAAK,E,GAClEvB,mBAAA,CAAuF;IAA/ED,KAAK,EAAC,iBAAiB;IAACI,IAAI,EAAC,QAAQ;IAAEqB,OAAK,EAAAZ,MAAA,QAAAA,MAAA,UAAAE,IAAA,KAAEC,QAAA,CAAAU,oBAAA,IAAAV,QAAA,CAAAU,oBAAA,IAAAX,IAAA,CAAoB;KAAE,IAAE,E,KAGlFd,mBAAA,CAGM,OAHN0B,WAGM,GAFJC,WAA6D,E,gBAC7D3B,mBAAA,CAAkG;IAA3FG,IAAI,EAAC,MAAM;IAACJ,KAAK,EAAC,cAAc;IAACqB,EAAE,EAAC,kBAAkB;IAjB/E,uBAAAR,MAAA,QAAAA,MAAA,MAAAS,MAAA,IAiByFC,KAAA,CAAAM,gBAAgB,GAAAP,MAAA;IAAEQ,QAAQ,EAAR;iDAAlBP,KAAA,CAAAM,gBAAgB,E,KAEzF5B,mBAAA,CAGM,OAHN8B,WAGM,GAFJC,WAAuD,E,gBACvD/B,mBAAA,CAAsF;IAA/EG,IAAI,EAAC,UAAU;IAACJ,KAAK,EAAC,cAAc;IAACqB,EAAE,EAAC,UAAU;IArB3E,uBAAAR,MAAA,QAAAA,MAAA,MAAAS,MAAA,IAqBqFC,KAAA,CAAAU,QAAQ,GAAAX,MAAA;IAAEQ,QAAQ,EAAR;iDAAVP,KAAA,CAAAU,QAAQ,E,KAE7EC,WAA+D,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}