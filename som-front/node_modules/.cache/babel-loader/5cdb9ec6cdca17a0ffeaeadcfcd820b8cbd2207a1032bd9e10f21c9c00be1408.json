{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      email: '',\n      password: '',\n      verificationCode: ''\n    };\n  },\n  methods: {\n    async submitForm() {\n      try {\n        const requestData = {\n          email: this.email,\n          verificationCode: this.verificationCode,\n          password: this.password\n        };\n        const token = localStorage.getItem('token');\n        const headers = token ? {\n          Authorization: `Bearer ${token}`\n        } : {};\n        await axios.get(`${process.env.VUE_APP_API_BASE_URL}/admin/account/password/verify-code/{email}/{code}`, requestData, {\n          headers\n        });\n\n        // 성공적으로 작성된 경우 리다이렉트 또는 다른 처리 수행\n        // this.$router.push({ name: 'LoginComponent' });\n        alert(\"정상\");\n      } catch (error) {\n        // 오류 발생 시 처리\n        console.error(error);\n        alert(\"입력값 확인 필요\");\n      }\n      // 여기에 비밀번호 재설정 양식 제출에 대한 로직을 추가하세요.\n      console.log('비밀번호 재설정 양식이 제출되었습니다.');\n      console.log('Email:', this.email);\n      console.log('인증번호:', this.verificationCode);\n      console.log('새 비밀번호:', this.password);\n    },\n    async sendVerificationCode() {\n      try {\n        // const requestData = {\n        //   email: this.email,\n        // };\n\n        const token = localStorage.getItem('token');\n        const headers = token ? {\n          Authorization: `Bearer ${token}`\n        } : {};\n        await axios.get(`${process.env.VUE_APP_API_BASE_URL}/admin/account/findPassword/${this.email}`, {\n          headers\n        });\n\n        // 성공적으로 작성된 경우 리다이렉트 또는 다른 처리 수행\n        // this.$router.push({ name: 'LoginComponent' });\n        alert(\"이메일이 전송되었습니다.\");\n      } catch (error) {\n        // 오류 발생 시 처리\n        console.error(error);\n        alert(\"입력값 확인 필요\");\n      }\n      // 이 부분에 전송 완료 알림을 표시하는 로직을 추가하세요.\n    }\n  }\n};","map":{"version":3,"names":["axios","data","email","password","verificationCode","methods","submitForm","requestData","token","localStorage","getItem","headers","Authorization","get","process","env","VUE_APP_API_BASE_URL","alert","error","console","log","sendVerificationCode"],"sources":["/Users/song/Desktop/springproject/som-front/src/views/PasswordChange.vue"],"sourcesContent":["<template>\n    <div class=\"container\">\n      <div class=\"row justify-content-center mt-5\">\n        <div class=\"col-md-6\">\n          <div class=\"card\">\n            <div class=\"card-header text-center\" style=\"color: black;\">비밀번호 재설정</div>\n            <div class=\"card-body\">\n              <form @submit.prevent=\"submitForm\">\n                <div class=\"mb-3\">\n                  <label for=\"email\" class=\"form-label\">이메일 주소</label>\n                  <div class=\"input-group\">\n                    <input type=\"email\" class=\"form-control\" id=\"email\" v-model=\"email\">\n                    <button class=\"btn btn-primary\" type=\"button\" @click=\"sendVerificationCode\">전송</button>\n                  </div>\n                </div>\n                <div class=\"mb-3\">\n                  <label for=\"verificationCode\" class=\"form-label\">인증번호</label>\n                  <input type=\"text\" class=\"form-control\" id=\"verificationCode\" v-model=\"verificationCode\" required>\n                </div>\n                <div class=\"mb-3\">\n                  <label for=\"password\" class=\"form-label\">새 비밀번호</label>\n                  <input type=\"password\" class=\"form-control\" id=\"password\" v-model=\"password\" required>\n                </div>\n                <button type=\"submit\" class=\"btn btn-primary w-100\">확인</button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n</template>\n<script>\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      email: '',\n      password: '',\n      verificationCode: ''\n    };\n  },\n  methods: {\n    async submitForm() {\n        try {\n        const requestData = {\n          email: this.email,\n          verificationCode: this.verificationCode,\n          password: this.password\n        };\n\n        const token = localStorage.getItem('token');\n        const headers = token ? { Authorization: `Bearer ${token}` } : {};\n\n        await axios.get(`${process.env.VUE_APP_API_BASE_URL}/admin/account/password/verify-code/{email}/{code}`, requestData, { headers });\n\n        // 성공적으로 작성된 경우 리다이렉트 또는 다른 처리 수행\n        // this.$router.push({ name: 'LoginComponent' });\n        alert(\"정상\");\n      } catch (error) {\n        // 오류 발생 시 처리\n        console.error(error);\n        alert(\"입력값 확인 필요\");\n      }\n      // 여기에 비밀번호 재설정 양식 제출에 대한 로직을 추가하세요.\n      console.log('비밀번호 재설정 양식이 제출되었습니다.');\n      console.log('Email:', this.email);\n      console.log('인증번호:', this.verificationCode);\n      console.log('새 비밀번호:', this.password);\n    },\n    async sendVerificationCode() {\n      try {\n        // const requestData = {\n        //   email: this.email,\n        // };\n\n        const token = localStorage.getItem('token');\n        const headers = token ? { Authorization: `Bearer ${token}` } : {};\n\n        await axios.get(`${process.env.VUE_APP_API_BASE_URL}/admin/account/findPassword/${this.email}`, {headers});\n\n        // 성공적으로 작성된 경우 리다이렉트 또는 다른 처리 수행\n        // this.$router.push({ name: 'LoginComponent' });\n        alert(\"이메일이 전송되었습니다.\")\n      } catch (error) {\n        // 오류 발생 시 처리\n        console.error(error);\n        alert(\"입력값 확인 필요\");\n      }\n      // 이 부분에 전송 완료 알림을 표시하는 로직을 추가하세요.\n    }\n  }\n};\n</script>\n<style>\n.container {\n  height: 100vh;\n}\n.card {\n  margin-top: 50px;\n  border-radius: 10px;\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);\n}\n.card-header {\n  background-color: #007BFF;\n  color: rgb(0, 0, 0);\n  border-radius: 10px 10px 0 0;\n}\n.btn-primary {\n  background-color: #007BFF;\n  border-color: #007BFF;\n  color: black; /* 폰트 색상을 검은색으로 변경 */\n}\n.btn-primary:hover {\n  background-color: #0056B3;\n  border-color: #0056B3;\n}\n</style>"],"mappings":"AAgCA,OAAOA,KAAI,MAAO,OAAO;AACzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,gBAAgB,EAAE;IACpB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,UAAUA,CAAA,EAAG;MACf,IAAI;QACJ,MAAMC,WAAU,GAAI;UAClBL,KAAK,EAAE,IAAI,CAACA,KAAK;UACjBE,gBAAgB,EAAE,IAAI,CAACA,gBAAgB;UACvCD,QAAQ,EAAE,IAAI,CAACA;QACjB,CAAC;QAED,MAAMK,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC3C,MAAMC,OAAM,GAAIH,KAAI,GAAI;UAAEI,aAAa,EAAG,UAASJ,KAAM;QAAE,IAAI,CAAC,CAAC;QAEjE,MAAMR,KAAK,CAACa,GAAG,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,oBAAqB,oDAAmD,EAAET,WAAW,EAAE;UAAEI;QAAQ,CAAC,CAAC;;QAElI;QACA;QACAM,KAAK,CAAC,IAAI,CAAC;MACb,EAAE,OAAOC,KAAK,EAAE;QACd;QACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpBD,KAAK,CAAC,WAAW,CAAC;MACpB;MACA;MACAE,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACpCD,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAClB,KAAK,CAAC;MACjCiB,OAAO,CAACC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAChB,gBAAgB,CAAC;MAC3Ce,OAAO,CAACC,GAAG,CAAC,SAAS,EAAE,IAAI,CAACjB,QAAQ,CAAC;IACvC,CAAC;IACD,MAAMkB,oBAAoBA,CAAA,EAAG;MAC3B,IAAI;QACF;QACA;QACA;;QAEA,MAAMb,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC3C,MAAMC,OAAM,GAAIH,KAAI,GAAI;UAAEI,aAAa,EAAG,UAASJ,KAAM;QAAE,IAAI,CAAC,CAAC;QAEjE,MAAMR,KAAK,CAACa,GAAG,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,oBAAqB,+BAA8B,IAAI,CAACd,KAAM,EAAC,EAAE;UAACS;QAAO,CAAC,CAAC;;QAE1G;QACA;QACAM,KAAK,CAAC,eAAe;MACvB,EAAE,OAAOC,KAAK,EAAE;QACd;QACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpBD,KAAK,CAAC,WAAW,CAAC;MACpB;MACA;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}