{"ast":null,"code":"import axios from 'axios';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nexport default {\n  props: ['isAdmin', 'pageTitle', 'id'],\n  data() {\n    return {\n      postList: [],\n      commentList: [],\n      title: '',\n      contents: '',\n      comment: '',\n      isLoading: false,\n      editor: ClassicEditor,\n      isEditing: false,\n      editedTitle: '',\n      editedContent: ''\n    };\n  },\n  created() {\n    this.loadPosts(this.id);\n    this.loadComments();\n    if (localStorage.getItem(\"token\")) {\n      this.isLogin = true;\n      this.userRole = localStorage.getItem(\"role\");\n    }\n  },\n  methods: {\n    async loadPosts(id) {\n      this.isLoading = true;\n      try {\n        const token = localStorage.getItem('token');\n        const headers = token ? {\n          Authorization: `Bearer ${token}`\n        } : {};\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/board/post/${id}/detail`, {\n          headers\n        });\n        this.postList = response.data.data;\n        this.title = this.postList.title;\n        this.contents = this.postList.contents;\n      } catch (error) {\n        console.error(\"데이터 불러오기 오류:\", error);\n      }\n    },\n    async commentCreate() {\n      this.isLoading = true;\n      try {\n        const formData = new FormData();\n        formData.append('comment', this.comment);\n        const token = localStorage.getItem('token');\n        const headers = token ? {\n          Authorization: `Bearer ${token}`\n        } : {};\n        await axios.post(`${process.env.VUE_APP_API_BASE_URL}/board/${this.id}/comment`, formData, {\n          headers\n        });\n        // 댓글이 등록된 후 댓글 목록을 다시 불러옴\n        await this.loadComments();\n        // 최신 댓글이 가장 위로 오도록 댓글 목록을 역순으로 정렬\n        this.commentList = this.commentList.reverse();\n        alert(\"댓글이 등록되었습니다.\");\n      } catch (error) {\n        console.error(error);\n        alert(\"입력값 확인 필요\");\n      }\n      this.isLoading = false;\n    },\n    async loadComments() {\n      this.isLoading = true;\n      try {\n        const token = localStorage.getItem('token');\n        const headers = token ? {\n          Authorization: `Bearer ${token}`\n        } : {};\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/board/${this.id}/comment/list`, {\n          headers\n        });\n        this.commentList = response.data.data;\n      } catch (error) {\n        console.error(\"데이터 불러오기 오류:\", error);\n      }\n    },\n    toggleEditMode() {\n      this.isEditing = !this.isEditing;\n      if (this.isEditing) {\n        // 수정 모드로 전환 시 제목과 내용을 복사하여 편집 가능한 변수에 저장\n        this.editedTitle = this.title;\n        this.editedContent = this.contents;\n      }\n    },\n    saveChanges() {\n      // 서버에 새로운 제목과 내용을 업데이트하는 로직을 추가해야 합니다.\n      // 이 예제에서는 제목과 내용을 업데이트하는 서버 요청을 보내는 코드를 작성하지는 않았습니다.\n      this.title = this.editedTitle;\n      this.contents = this.editedContent;\n      this.isEditing = false; // 수정 모드 종료\n    }\n  }\n};","map":{"version":3,"names":["axios","ClassicEditor","props","data","postList","commentList","title","contents","comment","isLoading","editor","isEditing","editedTitle","editedContent","created","loadPosts","id","loadComments","localStorage","getItem","isLogin","userRole","methods","token","headers","Authorization","response","get","process","env","VUE_APP_API_BASE_URL","error","console","commentCreate","formData","FormData","append","post","reverse","alert","toggleEditMode","saveChanges"],"sources":["/Users/song/Desktop/springproject/som-front/src/views/PostDetail.vue"],"sourcesContent":["<template>\n    <div class=\"container\">\n      <div class=\"page-header text-center\" style=\"margin-top: 20px\">\n        <h1>게시글</h1>\n      </div>\n      <!-- 게시글 제목 -->\n      <div class=\"post-title-container d-flex justify-content-between align-items-center\">\n        <div v-if=\"!isEditing\">\n          <label>게시글 제목:</label>\n          <div class=\"post-title\" v-html=\"title\"></div>\n        </div>\n        <div v-else>\n          <label>게시글 제목:</label>\n          <input type=\"text\" class=\"form-control\" v-model=\"editedTitle\">\n        </div>\n        <div>\n          <button type=\"button\" class=\"btn btn-outline-secondary\" @click=\"toggleEditMode\">수정</button>\n        </div>\n      </div>\n      <!-- 게시글 내용 -->\n      <div class=\"post-content-container\">\n        <label>게시글 내용:</label>\n        <div v-if=\"!isEditing\">\n          <div class=\"post-contents\" v-html=\"contents\"></div>\n        </div>\n        <div v-else>\n          <textarea class=\"form-control\" v-model=\"editedContent\"></textarea>\n        </div>\n      </div>\n      <!-- 댓글 작성 폼과 댓글 목록 -->\n      <div class=\"comment-section\">\n        <div class=\"form-container\">\n          <form @submit.prevent=\"commentCreate\" class=\"form-row align-items-end\">\n            <div class=\"col\">\n              <div class=\"form-group mb-0\">\n                <label>댓글 작성</label>\n                <input type=\"text\" v-model=\"comment\" class=\"form-control custom-input\">\n              </div>\n            </div>\n            <div class=\"col-auto\">\n              <button type=\"submit\" class=\"btn btn-outline-secondary\" :disabled=\"!comment.trim()\">등록</button>\n            </div>\n          </form>\n        </div>\n        <div class=\"comment-list-container\">\n          <div v-for=\"comment in commentList\" :key=\"comment.id\" class=\"comment-box\">\n            <div class=\"email-box\">\n              <p v-if=\"userRole !== 'ADMIN'\">익명</p>\n              <p v-if=\"userRole === 'ADMIN'\">{{ comment.nickname }}</p>\n            </div>\n            <div class=\"comment-text-box\">\n              <p>{{ comment.comment }}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </template>\n  <script>\n  import axios from 'axios';\n  import ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n  export default {\n    props: ['isAdmin', 'pageTitle', 'id'],\n    data() {\n      return {\n        postList: [],\n        commentList: [],\n        title: '',\n        contents: '',\n        comment: '',\n        isLoading: false,\n        editor: ClassicEditor,\n        isEditing: false,\n        editedTitle: '',\n        editedContent: ''\n      };\n    },\n    created() {\n      this.loadPosts(this.id);\n      this.loadComments();\n      if (localStorage.getItem(\"token\")) {\n        this.isLogin = true;\n        this.userRole = localStorage.getItem(\"role\");\n      }\n    },\n    methods: {\n      async loadPosts(id) {\n        this.isLoading = true;\n        try {\n          const token = localStorage.getItem('token');\n          const headers = token ? { Authorization: `Bearer ${token}` } : {};\n          const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/board/post/${id}/detail`, { headers });\n          this.postList = response.data.data;\n          this.title = this.postList.title;\n          this.contents = this.postList.contents;\n        } catch (error) {\n          console.error(\"데이터 불러오기 오류:\", error);\n        }\n      },\n      async commentCreate() {\n        this.isLoading = true;\n        try {\n          const formData = new FormData();\n          formData.append('comment', this.comment);\n          const token = localStorage.getItem('token');\n          const headers = token ? { Authorization: `Bearer ${token}` } : {};\n          await axios.post(`${process.env.VUE_APP_API_BASE_URL}/board/${this.id}/comment`, formData, { headers });\n          // 댓글이 등록된 후 댓글 목록을 다시 불러옴\n          await this.loadComments();\n          // 최신 댓글이 가장 위로 오도록 댓글 목록을 역순으로 정렬\n          this.commentList = this.commentList.reverse();\n          alert(\"댓글이 등록되었습니다.\");\n        } catch (error) {\n          console.error(error);\n          alert(\"입력값 확인 필요\");\n        }\n        this.isLoading = false;\n      },\n      async loadComments() {\n        this.isLoading = true;\n        try {\n          const token = localStorage.getItem('token');\n          const headers = token ? { Authorization: `Bearer ${token}` } : {};\n          const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/board/${this.id}/comment/list`, { headers });\n          this.commentList = response.data.data;\n        } catch (error) {\n          console.error(\"데이터 불러오기 오류:\", error);\n        }\n      },\n      toggleEditMode() {\n        this.isEditing = !this.isEditing;\n        if (this.isEditing) {\n          // 수정 모드로 전환 시 제목과 내용을 복사하여 편집 가능한 변수에 저장\n          this.editedTitle = this.title;\n          this.editedContent = this.contents;\n        }\n      },\n      saveChanges() {\n        // 서버에 새로운 제목과 내용을 업데이트하는 로직을 추가해야 합니다.\n        // 이 예제에서는 제목과 내용을 업데이트하는 서버 요청을 보내는 코드를 작성하지는 않았습니다.\n        this.title = this.editedTitle;\n        this.contents = this.editedContent;\n        this.isEditing = false; // 수정 모드 종료\n      }\n    }\n  }\n  </script>\n  <style scoped>\n  .post-title-container {\n    margin-bottom: 20px;\n  }\n  .post-content-container {\n    margin-bottom: 20px;\n  }\n  .post-title {\n    border: 1px solid #ccc;\n    padding: 10px;\n  }\n  .post-contents {\n    border: 1px solid #ccc;\n    padding: 10px;\n  }\n  .comment-section {\n    display: flex;\n    flex-direction: column;\n  }\n  .form-container {\n    margin-bottom: 20px;\n  }\n  .comment-box {\n    margin-bottom: 10px;\n    padding: 10px;\n    border: 1px solid #ccc;\n  }\n  .email-box,\n  .comment-text-box {\n    margin-bottom: 5px;\n  }\n  .email-box p,\n  .comment-text-box p {\n    margin: 0;\n    padding: 5px;\n  }\n  /* Custom Input Style */\n  .custom-input {\n    border: 1px solid #CED4DA;\n    border-radius: 0.25rem;\n    padding: 0.375rem 0.75rem;\n    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\n  }\n  /* Custom Button Style */\n  .custom-btn {\n    border-radius: 0.25rem;\n    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\n  }\n  </style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}